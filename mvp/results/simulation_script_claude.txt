globals [
  ; Transportation mode counters for each day
  daily-tram-count
  daily-cycling-count
  daily-bus-count
  daily-driving-count
  
  ; Weather condition (0 = good weather, 1 = rain)
  is-raining
  
  ; Day counter
  current-day
]

turtles-own [
  archetype ; 0 = Pragmatic Commuter, 1 = Environmentally Aware Commuter
  chosen-transport ; Current day's transportation choice
]

to setup
  clear-all
  
  ; Create 100 commuters
  create-turtles 100 [
    ; Randomly assign archetype (50% each)
    set archetype random 2
    
    ; Set visual properties
    ifelse archetype = 0 [
      set color red ; Pragmatic Commuter
    ] [
      set color green ; Environmentally Aware Commuter
    ]
    
    ; Position turtles randomly
    setxy random-xcor random-ycor
  ]
  
  ; Initialize variables
  set current-day 0
  set is-raining 0
  
  ; Initialize daily counters
  reset-daily-counters
  
  ; Setup plots
  setup-plot
  
  reset-ticks
end

to go
  if ticks >= 100 [ stop ]
  
  set current-day ticks + 1
  
  ; Determine weather (30% chance of rain each day)
  set is-raining ifelse-value (random 100 < 30) [1] [0]
  
  ; Reset daily counters
  reset-daily-counters
  
  ; Each commuter chooses transportation
  ask turtles [
    choose-transportation
    update-daily-counters
  ]
  
  ; Print daily results
  print-daily-results
  
  ; Update plots
  update-plot
  
  tick
end

to choose-transportation
  let transport-choice ""
  
  ifelse archetype = 0 [ ; Pragmatic Commuter
    ifelse is-raining = 1 [
      ; When raining: 100% driving
      set chosen-transport "Driving"
    ] [
      ; Normal weather: 100% driving (based on probability table)
      set chosen-transport "Driving"
    ]
  ] [
    ; Environmentally Aware Commuter (archetype = 1)
    ifelse is-raining = 1 [
      ; When raining: 100% bus
      set chosen-transport "Bus"
    ] [
      ; Normal weather: 100% tram
      set chosen-transport "Tram"
    ]
  ]
end

to update-daily-counters
  if chosen-transport = "Tram" [
    set daily-tram-count daily-tram-count + 1
  ]
  if chosen-transport = "Cycling" [
    set daily-cycling-count daily-cycling-count + 1
  ]
  if chosen-transport = "Bus" [
    set daily-bus-count daily-bus-count + 1
  ]
  if chosen-transport = "Driving" [
    set daily-driving-count daily-driving-count + 1
  ]
end

to reset-daily-counters
  set daily-tram-count 0
  set daily-cycling-count 0
  set daily-bus-count 0
  set daily-driving-count 0
end

to print-daily-results
  let weather-status ifelse-value (is-raining = 1) ["Rainy"] ["Clear"]
  print (word "Day " current-day " (" weather-status "): " 
             "Tram=" daily-tram-count " "
             "Cycling=" daily-cycling-count " "
             "Bus=" daily-bus-count " "
             "Driving=" daily-driving-count)
end

to setup-plot
  set-current-plot "Transportation Usage"
  clear-plot
  
  ; Create pens for each transportation mode
  create-temporary-plot-pen "Tram"
  set-plot-pen-color blue
  
  create-temporary-plot-pen "Cycling" 
  set-plot-pen-color green
  
  create-temporary-plot-pen "Bus"
  set-plot-pen-color orange
  
  create-temporary-plot-pen "Driving"
  set-plot-pen-color red
end

to update-plot
  set-current-plot "Transportation Usage"
  
  set-current-plot-pen "Tram"
  plot daily-tram-count
  
  set-current-plot-pen "Cycling"
  plot daily-cycling-count
  
  set-current-plot-pen "Bus" 
  plot daily-bus-count
  
  set-current-plot-pen "Driving"
  plot daily-driving-count
end