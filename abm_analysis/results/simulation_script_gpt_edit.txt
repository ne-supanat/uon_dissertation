globals [
  population-size   ; Total number of commuters
  ticks-to-run      ; Number of simulation ticks
  pragmatic-ratio   ; Ratio of pragmatic commuters in the population
  eco-ratio         ; Ratio of environmentally conscious commuters
]

turtles-own [
  archetype         ; "pragmatic" or "eco"
  transport-mode    ; Current mode of transport
]

to setup
  clear-all
  set population-size 100
  set ticks-to-run 100
  set pragmatic-ratio 0.5
  set eco-ratio 0.5

  create-turtles population-size [
    setxy random-xcor random-ycor
    set shape "person"

    ;; Assign archetypes based on ratio
    ifelse random-float 1 < pragmatic-ratio [
      set archetype "pragmatic"
    ][
      set archetype "eco"
    ]

    set transport-mode ""
  ]

  reset-ticks

  ;; Setup plot ranges
  set-current-plot "Transportation Mode"
  clear-plot
  set-plot-x-range 0 ticks-to-run
  set-plot-y-range 0 population-size
end

to go
  if ticks >= ticks-to-run [ stop ]

  ask turtles [
    choose-transport-mode
  ]

  update-plot
  tick
end

to choose-transport-mode
  let rain? false
  if random-float 1 < 0.2 [ set rain? true ]  ;; 20% chance of rain

  ifelse archetype = "pragmatic" [
    ;; Pragmatic commuters drive regardless
    set transport-mode "Driving"
  ][
    ;; Eco-conscious logic
    ifelse rain? [
      set transport-mode "Bus"
    ][
      set transport-mode "Tram"
    ]
  ]
end

to update-plot
  let tram-count count turtles with [ transport-mode = "Tram" ]
  let cycling-count count turtles with [ transport-mode = "Cycling" ]  ;; This will always be 0 unless used later
  let bus-count count turtles with [ transport-mode = "Bus" ]
  let driving-count count turtles with [ transport-mode = "Driving" ]

  set-current-plot "Transportation Mode"

  set-current-plot-pen "Tram"
  plotxy ticks tram-count

  set-current-plot-pen "Cycling"
  plotxy ticks cycling-count

  set-current-plot-pen "Bus"
  plotxy ticks bus-count

  set-current-plot-pen "Driving"
  plotxy ticks driving-count
end
