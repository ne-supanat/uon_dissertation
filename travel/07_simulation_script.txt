turtles-own [
  archetype
  ; physical-object
  travel-mode ; Add a variable to store the chosen travel mode
]

globals [
  traffic-congestion ; 0 (no congestion) to 1 (severe congestion)
]

to setup
  clear-all

  set traffic-congestion 0.5 ; Initialize traffic congestion

  create-turtles 100 [ ;number of people in the system
    setxy random-xcor random-ycor
    set shape "person"

    ; Randomly assign an archetype
    let archetype-index random 7
    ifelse archetype-index = 0 [
      set color 5
      set archetype "Car owner"
    ] [
      ifelse archetype-index = 1 [
        set color 15
        set archetype "Bus pass holder"
      ] [
        ifelse archetype-index = 2 [
          set color 25
          set archetype "Students"
        ] [
          ifelse archetype-index = 3 [
            set color 35
            set archetype "Commuter"
          ] [
            ifelse archetype-index = 4 [
              set color 45
              set archetype "Car dependent"
            ] [
              ifelse archetype-index = 5 [
                set color 55
                set archetype "Public transport user"
              ] [
                set color 65
                set archetype "Environmentally Conscious Commuter"
              ]
            ]
          ]
        ]
      ]
    ]
  ]
  reset-ticks
end

to go
  tick
  ask turtles [
    activity ; Each turtle chooses a travel mode based on its archetype and traffic conditions
  ]

  save ; Save the travel choices ratio
  if ticks = 500 [ stop ]
end

to activity ; Mode choice decision
  ; Determine travel mode based on archetype and traffic congestion
  let rand random-float 1
  ifelse archetype = "Car owner" [
    ifelse traffic-congestion > 0.5 [ ; If traffic is congested
      if rand < 0.1 [set travel-mode "Bus"] ; 10% chance to take the bus
      if rand > 0.1 and rand < 0.2 [set travel-mode "Train"] ; 10% chance to take the train
      if rand > 0.2 [set travel-mode "Car"] ; 80% chance to take the car
    ] [
      set travel-mode "Car" ; Otherwise, always take the car
    ]
  ] [
    ifelse archetype = "Bus pass holder" [
      ifelse traffic-congestion > 0.5 [
        set travel-mode "Bus" ; Always take the bus if congested
      ] [
        if rand < 0.9 [set travel-mode "Bus"] ; 90% chance to take the bus
        if rand > 0.9 [set travel-mode "Car"] ; 10% chance to take the car
      ]
    ] [
      ifelse archetype = "Students" [
        if rand < 0.4 [set travel-mode "Bus"]
        if rand > 0.4 and rand < 0.8 [set travel-mode "Train"]
        if rand > 0.8 [set travel-mode "Car"]
      ] [
        ifelse archetype = "Commuter" [
          if rand < 0.3 [set travel-mode "Bus"]
          if rand > 0.3 and rand < 0.6 [set travel-mode "Train"]
          if rand > 0.6 [set travel-mode "Car"]
        ] [
          ifelse archetype = "Car dependent" [
            ifelse traffic-congestion > 0.5 [
              if rand < 0.5 [set travel-mode "Bus"]
              if rand > 0.5 [set travel-mode "Train"]
            ] [
              set travel-mode "Car"
            ]
          ] [
            ifelse archetype = "Public transport user" [
              if rand < 0.8 [set travel-mode "Bus"]
              if rand > 0.8 [set travel-mode "Train"]
            ] [
              ifelse archetype = "Environmentally Conscious Commuter" [
                ifelse traffic-congestion > 0.5 [
                  set travel-mode "Bus"
                ] [
                  if rand < 0.8 [set travel-mode "Bus"]
                  if rand > 0.8 [set travel-mode "Train"]
                ]
              ] [
                set travel-mode "Car" ; Default to car if no archetype matches
              ]
            ]
          ]
        ]
      ]
    ]
  ]
end

to save
  file-open "outputs.csv"

  ; Calculate travel mode ratios
  let num-turtles count turtles
  let bus-users count turtles with [ travel-mode = "Bus" ]
  let train-users count turtles with [ travel-mode = "Train" ]
  let car-users count turtles with [ travel-mode = "Car" ]

  let bus-ratio (bus-users / num-turtles)
  let train-ratio (train-users / num-turtles)
  let car-ratio (car-users / num-turtles)

  ; Output the ratios to the file
  file-print (word ticks " , " bus-ratio " , " train-ratio " , " car-ratio)

  file-close
end