turtles-own [
  archetype
  happy
  commute-method
]

globals [
  total-carbon-emissions
  average-satisfaction
  policy-scenario ; 1: baseline, 2: improved public transport, 3: increased parking/fuel taxes, 4: car restrictions
]

to setup
  clear-all
  set total-carbon-emissions 0
  set average-satisfaction 0
  set policy-scenario 1 ; Default to baseline

  create-turtles 100 [ ; Number of commuters
    setxy random-xcor random-ycor
    set shape "person"

    ; Randomly assign an archetype
    let archetype-index random 3
    ifelse archetype-index = 0 [
      set color 5
      set archetype "Eco-Conscious Commuter"
    ] [
      ifelse archetype-index = 1 [
        set color 15
        set archetype "Convenience-Driven Commuter"
      ] [
        set color 25
        set archetype "Cost-Sensitive Commuter"
      ]
    ]

    ; Initialize happiness based on current policy (Scenario 1)
    set happy calculate-initial-happiness
    set commute-method choose-commute-method
  ]
  reset-ticks
end

to go
  tick
  ask turtles [
    set commute-method choose-commute-method
    set happy calculate-happiness
    commuting
  ]

  calculate-global-metrics
  save
  if ticks = 500 [ stop ]
end

to commuting
  ; Simplified carbon emission calculation based on commute method
  ifelse commute-method = "cycling" [
    set total-carbon-emissions total-carbon-emissions + 0 ; Cycling emits no carbon
  ] [
    ifelse commute-method = "use cars" [
      set total-carbon-emissions total-carbon-emissions + 10 ; Cars emit more carbon
    ] [
      set total-carbon-emissions total-carbon-emissions + 5 ; Public transport emits some carbon
    ]
  ]
end

to calculate-global-metrics
  ; Calculate average satisfaction
  set average-satisfaction mean [happy] of turtles
end

to calculate-initial-happiness
  ; Scenario 5: Initial happiness based on current transportation policy
  ifelse archetype = "Eco-Conscious Commuter" [
    ifelse random-float 1 < 0.2 [report 1] [report 0]
  ] [
    ifelse archetype = "Convenience-Driven Commuter" [
      ifelse random-float 1 < 0.7 [report 1] [report 0]
    ] [
      ifelse random-float 1 < 0.4 [report 1] [report 0]
        ]
  ]
end

to calculate-happiness
  ; Update happiness based on policy scenario
  ifelse policy-scenario = 1 [report calculate-initial-happiness] ; Baseline
  ifelse policy-scenario = 2 [report calculate-happiness-scenario-2]
  ifelse policy-scenario = 3 [report calculate-happiness-scenario-3]
  [report calculate-happiness-scenario-4]
end

to calculate-happiness-scenario-2
  ; Scenario 6: Happiness with improved public transport
  ifelse archetype = "Eco-Conscious Commuter" [
    ifelse random-float 1 < 0.8 [report 1] [report 0]
  ] [
    ifelse archetype = "Convenience-Driven Commuter" [
      ifelse random-float 1 < 0.7 [report 1] [report 0]
    ] [
      ifelse random-float 1 < 0.6 [report 1] [report 0]
    ]
  ]
end

to calculate-happiness-scenario-3
  ; Scenario 7: Happiness with increased parking/fuel taxes
  ifelse archetype = "Eco-Conscious Commuter" [
    ifelse random-float 1 < 0.7 [report 1] [report 0]
  ] [
    ifelse archetype = "Convenience-Driven Commuter" [
      ifelse random-float 1 < 0.2 [report 1] [report 0]
    ] [
      ifelse random-float 1 < 0.1 [report 1] [report 0]
    ]
  ]
end

to calculate-happiness-scenario-4
  ; Scenario 8: Happiness with car restrictions
  ifelse archetype = "Eco-Conscious Commuter" [
    ifelse random-float 1 < 0.8 [report 1] [report 0]
  ] [
    ifelse archetype = "Convenience-Driven Commuter" [
      ifelse random-float 1 < 0.3 [report 1] [report 0]
    ] [
      ifelse random-float 1 < 0.1 [report 1] [report 0]
    ]
  ]
end

to choose-commute-method
  ; Choose commute method based on archetype and policy scenario
  ifelse policy-scenario = 1 [report choose-commute-method-scenario-1]
  ifelse policy-scenario = 2 [report choose-commute-method-scenario-2]
  ifelse policy-scenario = 3 [report choose-commute-method-scenario-3]
  [report choose-commute-method-scenario-4]
end

to choose-commute-method-scenario-1
  ; Scenario 1: Regular workday
  ifelse archetype = "Eco-Conscious Commuter" [
    let rand random-float 1
    ifelse rand < 0.6 [report "cycling"] [ifelse rand < 0.7 [report "use cars"] [report "use public transport"]]
  ] [
    ifelse archetype = "Convenience-Driven Commuter" [
      let rand random-float 1
      ifelse rand < 0.1 [report "cycling"] [ifelse rand < 0.8 [report "use cars"] [report "use public transport"]]
    ] [
      let rand random-float 1
      ifelse rand < 0.1 [report "cycling"] [ifelse rand < 0.3 [report "use cars"] [report "use public transport"]]
    ]
  ]
end

to choose-commute-method-scenario-2
  ; Scenario 2: Improved public transport
  ifelse archetype = "Eco-Conscious Commuter" [
    let rand random-float 1
    ifelse rand < 0.3 [report "cycling"] [ifelse rand < 0.4 [report "use cars"] [report "use public transport"]]
  ] [
    ifelse archetype = "Convenience-Driven Commuter" [
      let rand random-float 1
      ifelse rand < 0.1 [report "cycling"] [ifelse rand < 0.4 [report "use cars"] [report "use public transport"]]
    ] [
      let rand random-float 1
      ifelse rand < 0.1 [report "cycling"] [ifelse rand < 0.3 [report "use cars"] [report "use public transport"]]
    ]
  ]
end

to choose-commute-method-scenario-3
  ; Scenario 3: Increased parking/fuel taxes
  ifelse archetype = "Eco-Conscious Commuter" [
    let rand random-float 1
    ifelse rand < 0.6 [report "cycling"] [ifelse rand < 0.7 [report "use cars"] [report "use public transport"]]
  ] [
    ifelse archetype = "Convenience-Driven Commuter" [
      let rand random-float 1
      ifelse rand < 0.1 [report "cycling"] [ifelse rand < 0.6 [report "use cars"] [report "use public transport"]]
    ] [
      let rand random-float 1
      ifelse rand < 0.2 [report "cycling"] [ifelse rand < 0.5 [report "use cars"] [report "use public transport"]]
    ]
  ]
end

to choose-commute-method-scenario-4
  ; Scenario 4: Car restrictions
  ifelse archetype = "Eco-Conscious Commuter" [
    let rand random-float 1
    ifelse rand < 0.6 [report "cycling"] [ifelse rand < 0.7 [report "use cars"] [report "use public transport"]]
  ] [
    ifelse archetype = "Convenience-Driven Commuter" [
      let rand random-float 1
      ifelse rand < 0.1 [report "cycling"] [ifelse rand < 0.6 [report "use cars"] [report "use public transport"]]
    ] [
      let rand random-float 1
      ifelse rand < 0.2 [report "cycling"] [ifelse rand < 0.5 [report "use cars"] [report "use public transport"]]
    ]
  ]
end

to save
  file-open "outputs.csv"
  file-print (word total-carbon-emissions "," average-satisfaction)
  file-close
end
